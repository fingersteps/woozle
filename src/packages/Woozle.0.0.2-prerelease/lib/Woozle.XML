<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Woozle</name>
    </assembly>
    <members>
        <member name="T:Woozle.Common.Exceptions.InstanceNotFoundException">
            <summary>
            Exception which is thrown when a desired instance was not found.
            </summary>
        </member>
        <member name="T:Woozle.Dependencies.WoozlePlugin">
            <summary>
            Register all dependencies for running Woozle (Core)
            </summary>
        </member>
        <member name="F:Woozle.Domain.AbstractLogic.log">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="T:Woozle.Domain.Authentication.AuthenticationLogic">
            <summary>
            Contains authentication related logic.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Woozle.Domain.Authentication.IAuthenticationLogic">
            <summary>
            Interface for the authentication businesslogic.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Woozle.Domain.Authentication.IAuthenticationLogic.Login(Woozle.Model.Authentication.LoginRequest)">
            <summary>
            Performs the login.
            </summary>
            <param name="loginRequest">The login request.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Woozle.Domain.Authentication.IAuthenticationLogic.GetLoginUser(System.String,System.String)">
            <summary>
            Gets the login user.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <returns>The <see cref="T:Woozle.Model.UserSearch.UserSearchForLoginResult"/></returns>
        </member>
        <member name="F:Woozle.Domain.Authentication.AuthenticationLogic.userRepository">
            <summary>
            <see cref="T:Woozle.Persistence.IUserRepository"/>
            </summary>
        </member>
        <member name="M:Woozle.Domain.Authentication.AuthenticationLogic.#ctor(Woozle.Persistence.IUserRepository)">
            <summary>
            ctor.
            </summary>
            <param name="userRepository"><see cref="T:Woozle.Persistence.IUserRepository"/></param>
        </member>
        <member name="M:Woozle.Domain.Authentication.AuthenticationLogic.Login(Woozle.Model.Authentication.LoginRequest)">
            <summary>
            Performs the login with the given request information.
            </summary>
            <param name="loginRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Woozle.Domain.Authentication.AuthenticationLogic.GetLoginUser(System.String,System.String)">
            <summary>
            Gets the login user.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <returns>The <see cref="T:Woozle.Model.UserSearch.UserSearchForLoginResult"/></returns>
        </member>
        <member name="T:Woozle.Domain.Authentication.InvalidLoginException">
            <summary>
            Exception if the user won't be found.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Woozle.Domain.Authentication.InvalidLoginException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Woozle.Domain.Authentication.InvalidLoginException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <remarks></remarks>
        </member>
        <member name="T:Woozle.Domain.Authority.GetRolesLogic">
            <summary>
            Logic for searching <see cref="T:Woozle.Model.Role">roles</see>
            </summary>
        </member>
        <member name="T:Woozle.Domain.Authority.IGetRolesLogic">
            <summary>
            Logic for searchig <see cref="T:Woozle.Model.Role">roles</see>
            </summary>
        </member>
        <member name="M:Woozle.Domain.Authority.IGetRolesLogic.GetAllMandatorRolesByMandator(Woozle.Model.SessionHandling.Session)">
            <summary>
            Gets a list of assigned <see cref="T:Woozle.Model.MandatorRole"/> of an <see cref="T:Woozle.Model.Mandator"/>
            </summary>
            <param name="session"><see cref="T:Woozle.Model.SessionHandling.Session"/></param>
            <returns></returns>
        </member>
        <member name="M:Woozle.Domain.Authority.IGetRolesLogic.GetMandatorRolesForMandator(Woozle.Model.SessionHandling.Session)">
            <summary>
            Gets all mandatorRoles for the mandator of the given session.
            </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="M:Woozle.Domain.Authority.GetRolesLogic.#ctor(Woozle.Persistence.IRepository{Woozle.Model.MandatorRole})">
            <summary>
            ctor.
            </summary>
            <see cref="T:Woozle.Persistence.IRepository`1">Repository for getting the role navigation property of the <see cref="T:Woozle.Model.Mandator"/>.</see>
        </member>
        <member name="M:Woozle.Domain.Authority.GetRolesLogic.GetAllMandatorRolesByMandator(Woozle.Model.SessionHandling.Session)">
            <summary>
            <see cref="M:Woozle.Domain.Authority.IGetRolesLogic.GetAllMandatorRolesByMandator(Woozle.Model.SessionHandling.Session)"/>
            </summary>
        </member>
        <member name="M:Woozle.Domain.Authority.IPermissionsLogic.SaveChangedPermissions(Woozle.Model.Role,System.Collections.Generic.List{Woozle.Model.ModulePermissions.ChangedModulePermission},Woozle.Model.SessionHandling.Session)">
            <summary>
            Persists the given changed permissions to database.
            </summary>
            <param name="role"></param>
            <param name="changedPermissions"></param>
            <param name="session"></param>
        </member>
        <member name="M:Woozle.Domain.Authority.IPermissionsLogic.GetAssignedPermissions(Woozle.Model.SessionHandling.Session)">
            <summary>
            Gets the assigned <see cref="T:Woozle.Model.FunctionPermission"/> for the logged in <see cref="T:Woozle.Model.User"/>
            </summary>
            <param name="session"><see cref="T:Woozle.Model.SessionHandling.Session"/></param>
            <returns>A list of <see cref="T:Woozle.Model.FunctionPermission"/></returns>
        </member>
        <member name="T:Woozle.Domain.PermissionManagement.IPermissionProvider">
            <summary>
            Dataprovider for permissions.
            </summary>
        </member>
        <member name="M:Woozle.Domain.PermissionManagement.IPermissionProvider.GetAssignedPermissions(Woozle.Model.SessionHandling.SessionData)">
            <summary>
            Gets all permission of the user of a <see cref="T:Woozle.Model.SessionHandling.Session"/>.
            </summary>
            <param name="session">The current <see cref="T:Woozle.Model.SessionHandling.SessionData"/></param>
            <returns>A list of <see cref="T:Woozle.Model.FunctionPermission"/> of the <see cref="T:Woozle.Model.User"/> from the <see cref="T:Woozle.Model.SessionHandling.Session"/></returns>
        </member>
        <member name="M:Woozle.Domain.Authority.PermissionsLogic.GetAssignedPermissions(Woozle.Model.SessionHandling.SessionData)">
            <summary>
            <see cref="M:Woozle.Domain.PermissionManagement.IPermissionProvider.GetAssignedPermissions(Woozle.Model.SessionHandling.SessionData)"/>
            </summary>
        </member>
        <member name="M:Woozle.Domain.Authority.PermissionsLogic.GetAssignedPermissions(Woozle.Model.SessionHandling.Session)">
            <summary>
            <see cref="M:Woozle.Domain.Authority.IPermissionsLogic.GetAssignedPermissions(Woozle.Model.SessionHandling.Session)"/>
            </summary>
        </member>
        <member name="M:Woozle.Domain.Location.LocationLogic.#ctor(Woozle.Persistence.IRepository{Woozle.Model.City},Woozle.Persistence.IRepository{Woozle.Model.Country},Woozle.Persistence.IRepository{Woozle.Model.Language})">
            <summary>
            ctor.
            </summary>
            <param name="cityRepository"></param>
            <param name="countryRepository"></param>
            <param name="languageRepository"></param>
        </member>
        <member name="M:Woozle.Domain.Location.LocationLogic.GetCities(Woozle.Model.SessionHandling.Session)">
            <summary>
            <see cref="M:Woozle.Domain.Location.ILocationLogic.GetCities(Woozle.Model.SessionHandling.Session)"/>
            </summary>
        </member>
        <member name="M:Woozle.Domain.Location.LocationLogic.GetCountries(Woozle.Model.SessionHandling.Session)">
            <summary>
            <see cref="M:Woozle.Domain.Location.ILocationLogic.GetCountries(Woozle.Model.SessionHandling.Session)"/>
            </summary>
        </member>
        <member name="M:Woozle.Domain.Location.LocationLogic.GetLanguages(Woozle.Model.SessionHandling.Session)">
            <summary>
            <see cref="M:Woozle.Domain.Location.ILocationLogic.GetLanguages(Woozle.Model.SessionHandling.Session)"/>
            </summary>
        </member>
        <member name="T:Woozle.Domain.ModuleManagement.IModuleLogic">
            <summary>
            Definition of the module management functionalities.
            </summary>
        </member>
        <member name="M:Woozle.Domain.ModuleManagement.IModuleLogic.GetModulesByMandator(Woozle.Model.SessionHandling.Session)">
            <summary>
            Gets all modules by given mandator
            </summary>
            <param name="session">The session</param>
            <returns>All Modules of the mandator</returns>
            
        </member>
        <member name="M:Woozle.Domain.ModuleManagement.IModuleLogic.FindModulePermissions(Woozle.Model.Role,Woozle.Model.SessionHandling.Session)">
            <summary>
            Gets all permissions of modules/functions acc. the mandant of the given session.
            </summary>
            <param name="role"> </param>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="T:Woozle.Domain.ModuleManagement.ModuleLogic">
            <summary>
            Contains the logic to manage modules.
            </summary>
        </member>
        <member name="M:Woozle.Domain.ModuleManagement.ModuleLogic.GetModulesByMandator(Woozle.Model.SessionHandling.Session)">
            <summary>
            <see cref="M:Woozle.Domain.ModuleManagement.IModuleLogic.GetModulesByMandator(Woozle.Model.SessionHandling.Session)"/>
            </summary>
        </member>
        <member name="T:Woozle.Domain.PermissionManagement.IPermissionManager">
            <summary>
            Interface for an permissionmanager.
            </summary>
        </member>
        <member name="M:Woozle.Domain.PermissionManagement.IPermissionManager.HasPermission(Woozle.Model.SessionHandling.SessionData,System.String,System.String)">
            <summary>
            Returns true, if the user of the <see cref="T:Woozle.Model.SessionHandling.Session"/> has the specified permission.
            </summary>
            <param name="session"><see cref="T:Woozle.Model.SessionHandling.Session"/></param>
            <param name="functionLogicalId">The logical id of the function</param>
            <param name="permissionId">The logical id of the permission</param>
            <returns>True, if the user of the <see cref="T:Woozle.Model.SessionHandling.Session"/> has the specified permission</returns>
        </member>
        <member name="F:Woozle.Domain.PermissionManagement.PermissionManager.permissionProvider">
            <summary>
            <see cref="T:Woozle.Domain.PermissionManagement.IPermissionProvider"/>
            </summary>
        </member>
        <member name="M:Woozle.Domain.PermissionManagement.PermissionManager.#ctor(Woozle.Domain.PermissionManagement.IPermissionProvider)">
            <summary>
            ctor.
            </summary>
            <param name="provider"><see cref="T:Woozle.Domain.PermissionManagement.IPermissionProvider"/></param>
        </member>
        <member name="M:Woozle.Domain.PermissionManagement.PermissionManager.HasPermission(Woozle.Model.SessionHandling.SessionData,System.String,System.String)">
            <summary>
            <see cref="M:Woozle.Domain.PermissionManagement.IPermissionManager.HasPermission(Woozle.Model.SessionHandling.SessionData,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Woozle.Domain.PersonManagement.IPersonLogic.SearchForExistingPerson(Woozle.Model.Person,Woozle.Model.SessionHandling.Session)">
            <summary>
            Checks if the given person is already existing in the database. If so, the existing person will be used for the further steps.
            </summary>
            <param name="person"></param>
            <param name="session"></param>
            <returns>A found person or the same person which was given as parameter when there was no matching person found.</returns>
        </member>
        <member name="M:Woozle.Domain.Translation.ITranslator.GetTranslatedText(Woozle.Model.SessionHandling.Session,System.String)">
            <summary>
            Gets for a text the translation by the language of the user for a given message code.
            <remarks>
                If there is no translation it will get back the defaultdescription.
            </remarks>
            </summary>
            <param name="session">The curren <see cref="T:Woozle.Model.SessionHandling.Session"/></param>
            <param name="messgeCode">The cod of the message</param>
            <returns>The translated text or null when nothing could be found with the given messageCode.</returns>
        </member>
        <member name="T:Woozle.Domain.UserManagement.Constants">
            <summary>
            Holds Constants which can be used anywhere in the solution.
            </summary>
        </member>
        <member name="F:Woozle.Domain.UserManagement.Constants.LogicalIdSearchUserV1">
            <summary>
            Logical id of the search user view.
            </summary>
        </member>
        <member name="F:Woozle.Domain.UserManagement.Constants.LogicalIdDetailUserV1">
            <summary>
            Logical id of the detail user view.
            </summary>
        </member>
        <member name="T:Woozle.Domain.UserManagement.IUserLogic">
            <summary>
            Definition of a UserLogic.
            </summary>
        </member>
        <member name="M:Woozle.Domain.UserManagement.IUserLogic.Search(Woozle.Model.UserSearch.UserSearchCriteria,Woozle.Model.SessionHandling.Session)">
            <summary>
            Searchs users by given criteria.
            </summary>
            <param name="criteriaUser">The user criteria</param>
            <param name="session">The session</param>
            <returns>A list of users</returns>
        </member>
        <member name="M:Woozle.Domain.UserManagement.IUserLogic.Save(Woozle.Model.User,Woozle.Model.SessionHandling.Session)">
            <summary>
            Saves the specified user.
            </summary>
            <param name="user"><see cref="T:Woozle.Model.User"/></param>
            <param name="session"><see cref="T:Woozle.Model.SessionHandling.Session"/></param>
            <returns><see cref="T:Woozle.Model.Validation.Creation.ISaveResult`1"/>.</returns>
        </member>
        <member name="M:Woozle.Domain.UserManagement.IUserLogic.Delete(System.Int32,Woozle.Model.SessionHandling.Session)">
            <summary>
            Deletes the specific user.
            </summary>
            <param name="user"><see cref="T:Woozle.Model.User"/></param>
            <param name="session"><see cref="T:Woozle.Model.SessionHandling.Session"/></param>
        </member>
        <member name="M:Woozle.Domain.UserManagement.IUserLogic.LoadUser(System.Int32,Woozle.Model.SessionHandling.Session)">
            <summary>
            Loads a user by the given id.
            </summary>
            <param name="id"></param>
            <param name="session"></param>
        </member>
        <member name="M:Woozle.Domain.UserManagement.IUserLogic.GetUsersOfMandator(Woozle.Model.SessionHandling.Session)">
            <summary>
            Gets all users of the current mandator
            </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="T:Woozle.Domain.UserManagement.IUserValidator">
            <summary>
            Marker interface for a user validator.
            </summary>
        </member>
        <member name="P:Woozle.Domain.UserManagement.IUserValidator.EditMode">
            <summary>
            Check if the user will be edited.
            </summary>
        </member>
        <member name="P:Woozle.Domain.UserManagement.IUserValidator.Session">
            <summary>
            <see cref="P:Woozle.Domain.UserManagement.IUserValidator.Session"/>
            </summary>
        </member>
        <member name="T:Woozle.Domain.UserManagement.UserBusinessValidator">
            <summary>
            Validator for the user creation process.
            </summary>
        </member>
        <member name="M:Woozle.Domain.UserManagement.UserBusinessValidator.#ctor(Woozle.Persistence.IUserRepository)">
            <summary>
            ctor.
            </summary>
        </member>
        <member name="M:Woozle.Domain.UserManagement.UserBusinessValidator.UserNameNotExists(Woozle.Model.User,System.String)">
            <summary>
            Checks, if a user with the specified username already exists.
            </summary>
            <param name="user">The user</param>
            <param name="username">Username</param>
            <returns>true, if the username not exists.</returns>
        </member>
        <member name="P:Woozle.Domain.UserManagement.UserBusinessValidator.EditMode">
            <summary>
            Flag if the use case editing an user or create an user.
            </summary>
        </member>
        <member name="P:Woozle.Domain.UserManagement.UserBusinessValidator.Session">
            <summary>
            <see cref="P:Woozle.Domain.UserManagement.UserBusinessValidator.Session"/>
            </summary>
        </member>
        <member name="T:Woozle.Domain.UserManagement.UserLogic">
            <summary>
            The implementation for the UserLogic.
            </summary>
        </member>
        <member name="F:Woozle.Domain.UserManagement.UserLogic.repository">
            <summary>
            <see cref="T:Woozle.Persistence.IUserRepository"/>
            </summary>
        </member>
        <member name="F:Woozle.Domain.UserManagement.UserLogic.userValidator">
            <summary>
            <see cref="T:Woozle.Domain.UserManagement.IUserValidator"/>
            </summary>
        </member>
        <member name="F:Woozle.Domain.UserManagement.UserLogic.permissionManager">
            <summary>
            <see cref="T:Woozle.Domain.PermissionManagement.IPermissionManager"/>
            </summary>
        </member>
        <member name="M:Woozle.Domain.UserManagement.UserLogic.#ctor(Woozle.Domain.UserManagement.IUserValidator,Woozle.Persistence.IUserRepository,Woozle.Domain.PermissionManagement.IPermissionManager)">
            <summary>
            ctor.
            </summary>
            <param name="validator"><see cref="T:Woozle.Domain.UserManagement.IUserValidator"/></param>
            <param name="repository"><see cref="T:Woozle.Persistence.IRepository`1"/></param>
            <param name="permissionManager"><see cref="T:Woozle.Domain.PermissionManagement.IPermissionManager"/></param>
        </member>
        <member name="M:Woozle.Domain.UserManagement.UserLogic.Search(Woozle.Model.UserSearch.UserSearchCriteria,Woozle.Model.SessionHandling.Session)">
            <summary>
            <see cref="M:Woozle.Domain.UserManagement.IUserLogic.Search(Woozle.Model.UserSearch.UserSearchCriteria,Woozle.Model.SessionHandling.Session)"/>
            </summary>
        </member>
        <member name="M:Woozle.Domain.UserManagement.UserLogic.Save(Woozle.Model.User,Woozle.Model.SessionHandling.Session)">
            <summary>
            Saves the specified user.
            </summary>
            <param name="user">The user.</param>
            <param name="session">The required session.</param>
            <returns><see cref="T:Woozle.Model.Validation.Creation.ISaveResult`1"/></returns>
        </member>
        <member name="M:Woozle.Services.Authentication.LoginContextService.Get(Woozle.Services.Authentication.LoginContext)">
            <summary>
            Gets the context of the user which is logged in to this Session (User and Mandator)
            </summary>
            <param name="requestDto"></param>
            <returns></returns>
        </member>
        <member name="T:Woozle.Services.Authentication.MandatorAuthenticateAttribute">
            <summary>
            Indicates that the request dto, which is associated with this attribute,
            requires authentication.
            </summary>
        </member>
        <member name="M:Woozle.Services.Authentication.MandatorSelectionService.#ctor(Woozle.Domain.Authentication.IAuthenticationLogic)">
            <summary>
            ctor.
            </summary>
            <param name="authenticationLogic"><see cref="T:Woozle.Domain.Authentication.IAuthenticationLogic"/></param>
        </member>
        <member name="M:Woozle.Services.Authentication.MandatorSelectionService.Get(Woozle.Services.Mandator.MandatorsForSelectionDto)">
            <summary>
            Gets the mandators of the currently logged in user
            </summary>
            <param name="mandator"></param>
            <returns></returns>
        </member>
        <member name="T:Woozle.Services.Authentication.WoozleCredentialsAuthProvider">
            <summary>
            Specific provider for authentication
            </summary>
        </member>
        <member name="F:Woozle.Services.Authentication.WoozleCredentialsAuthProvider.authenticationLogic">
            <summary>
            <see cref="T:Woozle.Domain.Authentication.IAuthenticationLogic"/>
            </summary>
        </member>
        <member name="F:Woozle.Services.Authentication.WoozleCredentialsAuthProvider.data">
            <summary>
            <see cref="T:Woozle.Model.SessionHandling.SessionData"/>
            </summary>
        </member>
        <member name="F:Woozle.Services.Authentication.WoozleCredentialsAuthProvider.loginResult">
            <summary>
            <see cref="T:Woozle.Model.Authentication.LoginResult"/>
            </summary>
        </member>
        <member name="M:Woozle.Services.Authentication.WoozleCredentialsAuthProvider.#ctor(Funq.Container)">
            <summary>
            ctor.
            </summary>
            <param name="authenticationLogic"><see cref="T:Woozle.Domain.Authentication.IAuthenticationLogic"/></param>
        </member>
        <member name="M:Woozle.Services.Authentication.WoozleCredentialsAuthProvider.TryAuthenticate(ServiceStack.ServiceInterface.IServiceBase,System.String,System.String)">
            <summary>
            <see cref="M:ServiceStack.ServiceInterface.Auth.CredentialsAuthProvider.TryAuthenticate(ServiceStack.ServiceInterface.IServiceBase,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Woozle.Services.Authority.MandatorRoleService.Get(Woozle.Services.Authority.MandatorRoles)">
            <summary>
            Get all MandatorRoles of the current session
            </summary>
            <param name="requestDto"></param>
            <returns></returns>
        </member>
        <member name="M:Woozle.Services.Authority.MandatorRoleService.Get(Woozle.Services.Authority.MandatorRolesForDropDown)">
            <summary>
            Get all MandatorRoles of the current session used for drop down menus
            </summary>
            <param name="requestDto"></param>
            <returns></returns>
        </member>
        <member name="M:Woozle.Services.Authority.PermissionService.Get(Woozle.Services.Authority.Permissions)">
            <summary>
            Get all FunctionPermissions of the current session
            </summary>
            <param name="requestDto"></param>
            <returns></returns>
        </member>
        <member name="M:Woozle.Services.Authority.PermissionService.Put(Woozle.Services.Authority.SavePermissions)">
            <summary>
            Updates all given permissions for the given role
            </summary>
            <param name="requestDto"></param>
            <returns></returns>
        </member>
        <member name="M:Woozle.Services.Authority.RoleService.Get(Woozle.Services.Authority.RoleModulePermissions)">
            <summary>
            Get all ModulePermissions of the given role
            </summary>
            <param name="requestDto"></param>
            <returns></returns>
        </member>
        <member name="T:Woozle.Services.ExceptionCatcher">
            <summary>
            Catches all exceptions and parse them into user friendli ServiceExceptions, which gets sent to the Client
            </summary>
        </member>
        <member name="M:Woozle.Services.ExceptionCatcher.GetInstance``1(System.Object)">
            <summary>
            Gets the instance object in the desired type.
            </summary>
        </member>
        <member name="P:Woozle.Services.Location.CountryDto.TranslatedValue">
            <summary>
            To use the translated value directly it needs to be filled explicit
            </summary>
        </member>
        <member name="M:Woozle.Services.Location.LanguageService.Get(Woozle.Services.Location.Languages)">
            <summary>
            Gets all languages
            </summary>
            <param name="requestDto"></param>
            <returns></returns>
        </member>
        <member name="P:Woozle.Services.Location.Message.TranslatedValue">
            <summary>
            To use the translated value directly it needs to be filled explicit
            </summary>
        </member>
        <member name="M:Woozle.Services.Mandator.MandatorService.Get(Woozle.Services.Mandator.MandatorDto)">
            <summary>
            Gets the mandator of the currently logged in user
            </summary>
            <param name="mandator"></param>
            <returns></returns>
        </member>
        <member name="M:Woozle.Services.Mandator.MandatorService.Put(Woozle.Services.Mandator.MandatorDto)">
            <summary>
            Updates the given mandator
            </summary>
            <param name="requestDto"></param>
            <returns></returns>
        </member>
        <member name="M:Woozle.Services.Modules.ModuleService.Get(Woozle.Services.Modules.ModulesDto)">
            <summary>
            Gets all modules of the mandator of the currently logged in user
            </summary>
            <param name="requestDto"></param>
            <returns></returns>
        </member>
        <member name="T:Woozle.Services.SaveResultDto`1">
            <summary>
            Result class for each service operation between client and server.
            </summary>
            <typeparam name="T">Type of the service entity</typeparam>
        </member>
        <member name="M:Woozle.Services.SaveResultDto`1.#ctor">
            <summary>
            ctor.
            </summary>
        </member>
        <member name="P:Woozle.Services.SaveResultDto`1.TargetObject">
            <summary>
            Target entity
            </summary>
        </member>
        <member name="P:Woozle.Services.SaveResultDto`1.HasErrors">
            <summary>
            Flag, which indicates if there is an error.
            </summary>
        </member>
        <member name="P:Woozle.Services.SaveResultDto`1.HasSystemErrors">
            <summary>
            Flag, which indicactes if there is a system error.
            </summary>
        </member>
        <member name="P:Woozle.Services.SaveResultDto`1.Errors">
            <summary>
            A list with <see cref="T:Woozle.Model.Validation.Error">errors</see>
            </summary>
        </member>
        <member name="P:Woozle.Services.Modules.FunctionDto.TranslatedValue">
            <summary>
            To use the translated value directly it needs to be filled explicit
            </summary>
        </member>
        <member name="P:Woozle.Services.Modules.ModuleDto.TranslatedValue">
            <summary>
            To use the translated value directly it needs to be filled explicit
            </summary>
        </member>
        <member name="M:Woozle.Services.Settings.SettingService.Get(Woozle.Model.Setting)">
            <summary>
            Gets one specific Settings
            </summary>
            <returns></returns>
        </member>
        <member name="M:Woozle.Services.Settings.SettingService.Post(Woozle.Model.Setting)">
            <summary>
            Inserts a given object
            </summary>
            <param name="requestDto"></param>
            <returns></returns>
        </member>
        <member name="M:Woozle.Services.Settings.SettingService.Put(Woozle.Model.Setting)">
            <summary>
            Updates a given object
            </summary>
            <param name="requestDto"></param>
            <returns></returns>
        </member>
        <member name="M:Woozle.Services.UserManagement.UserService.Get(Woozle.Services.UserManagement.UsersForDropDownDto)">
            <summary>
            Gets all users of the mandator of the currently logged in user
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Woozle.Services.UserManagement.UserService.Post(Woozle.Services.UserManagement.UserDto)">
            <summary>
            Inserts a given object
            </summary>
            <param name="userDto"></param>
            <returns></returns>
        </member>
        <member name="M:Woozle.Services.UserManagement.UserService.Put(Woozle.Services.UserManagement.UserDto)">
            <summary>
            Updates a given object
            </summary>
            <param name="userDto"></param>
            <returns></returns>
        </member>
    </members>
</doc>
