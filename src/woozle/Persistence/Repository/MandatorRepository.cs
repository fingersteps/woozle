//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Diagnostics;
using Woozle.Core.Persistence.Repository;
using Woozle.Core.Model;
using System;
using System.Linq;
using System.Collections.Generic;
using Woozle.Core.Model.SessionHandling;
using Woozle.Core.Persistence.Impl;
using Woozle.Model;

namespace Woozle.Persistence.Repository
{
    public partial class MandatorRepository  : AbstractRepository<Mandator>
    {
    
    	public MandatorRepository(IEfUnitOfWork Context) : base(Context)
    	{
    	}
    
    
    	 public override Mandator Synchronize(Mandator entity, Session session) 
    	 { 
    		try
    		{
    			var stopwatch = new Stopwatch();
    			var attachedObj = Context.SynchronizeObject(entity, session);
    			
    			attachedObj.City = Context.SynchronizeObject(entity.City, session); 
    
    			attachedObj.MandatorGroup = Context.SynchronizeObject(entity.MandatorGroup, session); 
    
    			
    			//Navigation Property 'Modules'
    			stopwatch.Start();
    			foreach(var n in entity.Modules.Where(n => n.PersistanceState == PState.Added))
    			{ 
    				if (!attachedObj.Modules.Contains(n)) attachedObj.Modules.Add(n);
    				if (n is IMandatorCapable)
    				{
    					n.MandatorId = session.SessionObject.Mandator.Id;
    				}
    			} 
    			foreach(var n in entity.Modules.Where(n => n.PersistanceState == PState.Modified || n.PersistanceState == PState.Deleted))
    			{ 
    					Context.SynchronizeObject(n, session); 
    			} 
    			stopwatch.Stop();
    			this.Logger.Info(string.Format("Synchronize state of '{0}', took {1} ms", "Modules", stopwatch.ElapsedMilliseconds));
    			//Navigation Property 'Locations'
    			stopwatch.Start();
    			foreach(var n in entity.Locations.Where(n => n.PersistanceState == PState.Added))
    			{ 
    				if (!attachedObj.Locations.Contains(n)) attachedObj.Locations.Add(n);
    				if (n is IMandatorCapable)
    				{
    					n.MandatorId = session.SessionObject.Mandator.Id;
    				}
    			} 
    			foreach(var n in entity.Locations.Where(n => n.PersistanceState == PState.Modified || n.PersistanceState == PState.Deleted))
    			{ 
    					Context.SynchronizeObject(n, session); 
    			} 
    			stopwatch.Stop();
    			this.Logger.Info(string.Format("Synchronize state of '{0}', took {1} ms", "Locations", stopwatch.ElapsedMilliseconds));
    			//Navigation Property 'MandatorRoles'
    			stopwatch.Start();
    			foreach(var n in entity.MandatorRoles.Where(n => n.PersistanceState == PState.Added))
    			{ 
    				if (!attachedObj.MandatorRoles.Contains(n)) attachedObj.MandatorRoles.Add(n);
    				if (n is IMandatorCapable)
    				{
    					n.MandatorId = session.SessionObject.Mandator.Id;
    				}
    			} 
    			foreach(var n in entity.MandatorRoles.Where(n => n.PersistanceState == PState.Modified || n.PersistanceState == PState.Deleted))
    			{ 
    					Context.SynchronizeObject(n, session); 
    			} 
    			stopwatch.Stop();
    			this.Logger.Info(string.Format("Synchronize state of '{0}', took {1} ms", "MandatorRoles", stopwatch.ElapsedMilliseconds));
    			//Navigation Property 'People'
    			stopwatch.Start();
    			foreach(var n in entity.People.Where(n => n.PersistanceState == PState.Added))
    			{ 
    				if (!attachedObj.People.Contains(n)) attachedObj.People.Add(n);
    				if (n is IMandatorCapable)
    				{
    					n.MandatorId = session.SessionObject.Mandator.Id;
    				}
    			} 
    			foreach(var n in entity.People.Where(n => n.PersistanceState == PState.Modified || n.PersistanceState == PState.Deleted))
    			{ 
    					Context.SynchronizeObject(n, session); 
    			} 
    			stopwatch.Stop();
    			this.Logger.Info(string.Format("Synchronize state of '{0}', took {1} ms", "People", stopwatch.ElapsedMilliseconds));
    			//Navigation Property 'Settings'
    			stopwatch.Start();
    			foreach(var n in entity.Settings.Where(n => n.PersistanceState == PState.Added))
    			{ 
    				if (!attachedObj.Settings.Contains(n)) attachedObj.Settings.Add(n);
    				if (n is IMandatorCapable)
    				{
    					n.MandatorId = session.SessionObject.Mandator.Id;
    				}
    			} 
    			foreach(var n in entity.Settings.Where(n => n.PersistanceState == PState.Modified || n.PersistanceState == PState.Deleted))
    			{ 
    					Context.SynchronizeObject(n, session); 
    			} 
    			stopwatch.Stop();
    			this.Logger.Info(string.Format("Synchronize state of '{0}', took {1} ms", "Settings", stopwatch.ElapsedMilliseconds));
    			return attachedObj; 
    		}
    	catch (Exception e)
    	{
    		this.Logger.Error(e.Message); 
    		throw new PersistenceException(PersistenceOperation.SYNCHRONIZE, e); 
    	} 
      } 
    	 public override void Delete(Mandator entity, Session session) 
    	 { 
    		try
    		{
    			var stopwatch = new Stopwatch();
    			entity.PersistanceState = PState.Unchanged;
    			var attachedObj = Context.SynchronizeObject(entity, session);
    			
    			
    
    			//Navigation Property 'Modules'
    			stopwatch.Start();
    			Context.LoadCollection<Mandator>(attachedObj.Id, "Modules");
    			foreach (var n in attachedObj.Modules.ToList())
    			{
    				n.PersistanceState = PState.Deleted;
    			    Context.SynchronizeObject(n, session);
    			} 
    			stopwatch.Stop();
    			this.Logger.Info(string.Format("Synchronize state of '{0}', took {1} ms", "Modules", stopwatch.ElapsedMilliseconds));
    
    			//Navigation Property 'Locations'
    			stopwatch.Start();
    			Context.LoadCollection<Mandator>(attachedObj.Id, "Locations");
    			foreach (var n in attachedObj.Locations.ToList())
    			{
    				n.PersistanceState = PState.Deleted;
    			    Context.SynchronizeObject(n, session);
    			} 
    			stopwatch.Stop();
    			this.Logger.Info(string.Format("Synchronize state of '{0}', took {1} ms", "Locations", stopwatch.ElapsedMilliseconds));
    
    			//Navigation Property 'MandatorRoles'
    			stopwatch.Start();
    			Context.LoadCollection<Mandator>(attachedObj.Id, "MandatorRoles");
    			foreach (var n in attachedObj.MandatorRoles.ToList())
    			{
    				n.PersistanceState = PState.Deleted;
    			    Context.SynchronizeObject(n, session);
    			} 
    			stopwatch.Stop();
    			this.Logger.Info(string.Format("Synchronize state of '{0}', took {1} ms", "MandatorRoles", stopwatch.ElapsedMilliseconds));
    
    			//Navigation Property 'People'
    			stopwatch.Start();
    			Context.LoadCollection<Mandator>(attachedObj.Id, "People");
    			foreach (var n in attachedObj.People.ToList())
    			{
    				n.PersistanceState = PState.Deleted;
    			    Context.SynchronizeObject(n, session);
    			} 
    			stopwatch.Stop();
    			this.Logger.Info(string.Format("Synchronize state of '{0}', took {1} ms", "People", stopwatch.ElapsedMilliseconds));
    
    			//Navigation Property 'Settings'
    			stopwatch.Start();
    			Context.LoadCollection<Mandator>(attachedObj.Id, "Settings");
    			foreach (var n in attachedObj.Settings.ToList())
    			{
    				n.PersistanceState = PState.Deleted;
    			    Context.SynchronizeObject(n, session);
    			} 
    			stopwatch.Stop();
    			this.Logger.Info(string.Format("Synchronize state of '{0}', took {1} ms", "Settings", stopwatch.ElapsedMilliseconds));
    			attachedObj.PersistanceState = PState.Deleted;
    			attachedObj = Context.SynchronizeObject(attachedObj, session);
    			stopwatch.Start();
    			Context.Commit();
    			stopwatch.Stop();
    			this.Logger.Info(string.Format("Commit '{0}' Delete, took {1} ms", "Mandator", stopwatch.ElapsedMilliseconds));
    		}
    	catch (Exception e)
    	{
    		this.Logger.Error(e.Message); 
    		throw new PersistenceException(PersistenceOperation.DELETE, e);  
    	} 
      } 
    
    }
    
}
