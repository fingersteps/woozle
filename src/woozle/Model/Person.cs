//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace Woozle.Model
{
    [Serializable]
    public partial class Person : WoozleObject, IMandatorCapable, IManagedConcurrency
    {
        private string lastname;
        private string firstname;
        private string email;
        private byte[] picture;
        private string street;
        private Nullable<int> cityid;
        private string phone;
        private string mobile;
        private Nullable<System.DateTime> birthdate;
        private string enterprisename;
        private Nullable<int> salutationstatusid;
        private byte[] changecounter;
    
        public string LastName 
    	{ 
    		get { return this.lastname;} 
    		set { 
    			if(this.lastname != value)
    			{
    				this.lastname = value;
    				OnPropertyChanged("LastName");
    			}
    		}
    	}
        public string FirstName 
    	{ 
    		get { return this.firstname;} 
    		set { 
    			if(this.firstname != value)
    			{
    				this.firstname = value;
    				OnPropertyChanged("FirstName");
    			}
    		}
    	}
        public string EMail 
    	{ 
    		get { return this.email;} 
    		set { 
    			if(this.email != value)
    			{
    				this.email = value;
    				OnPropertyChanged("EMail");
    			}
    		}
    	}
        public byte[] Picture 
    	{ 
    		get { return this.picture;} 
    		set { 
    			if(this.picture != value)
    			{
    				this.picture = value;
    				OnPropertyChanged("Picture");
    			}
    		}
    	}
        public string Street 
    	{ 
    		get { return this.street;} 
    		set { 
    			if(this.street != value)
    			{
    				this.street = value;
    				OnPropertyChanged("Street");
    			}
    		}
    	}
        public Nullable<int> CityId 
    	{ 
    		get { return this.cityid;} 
    		set { 
    			if(this.cityid != value)
    			{
    				this.cityid = value;
    				OnPropertyChanged("CityId");
    			}
    		}
    	}
        public string Phone 
    	{ 
    		get { return this.phone;} 
    		set { 
    			if(this.phone != value)
    			{
    				this.phone = value;
    				OnPropertyChanged("Phone");
    			}
    		}
    	}
        public string Mobile 
    	{ 
    		get { return this.mobile;} 
    		set { 
    			if(this.mobile != value)
    			{
    				this.mobile = value;
    				OnPropertyChanged("Mobile");
    			}
    		}
    	}
        public Nullable<System.DateTime> Birthdate 
    	{ 
    		get { return this.birthdate;} 
    		set { 
    			if(this.birthdate != value)
    			{
    				this.birthdate = value;
    				OnPropertyChanged("Birthdate");
    			}
    		}
    	}
        public string EnterpriseName 
    	{ 
    		get { return this.enterprisename;} 
    		set { 
    			if(this.enterprisename != value)
    			{
    				this.enterprisename = value;
    				OnPropertyChanged("EnterpriseName");
    			}
    		}
    	}
        public Nullable<int> SalutationStatusId 
    	{ 
    		get { return this.salutationstatusid;} 
    		set { 
    			if(this.salutationstatusid != value)
    			{
    				this.salutationstatusid = value;
    				OnPropertyChanged("SalutationStatusId");
    			}
    		}
    	}
        public byte[] ChangeCounter 
    	{ 
    		get { return this.changecounter;} 
    		set { 
    			if(this.changecounter != value)
    			{
    				this.changecounter = value;
    				OnPropertyChanged("ChangeCounter");
    			}
    		}
    	}
    
    
    public virtual City City { get; set; }
    
    
    public virtual Status SalutationStatus { get; set; }
    
    
    public virtual Mandator Mandator { get; set; }
    
    
    public event PropertyChangedEventHandler LocalPropertyChanged;
    private event EventHandler AnyPropertyChanged;
    
    protected void OnPropertyChanged(String propertyName)
    {
    	if (this.LocalPropertyChanged != null)
        {
            this.LocalPropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    private void OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
    {
    	OnPropertyChanged("Collection");
    }
    
    public void HandleLocalPropertyChanged(object sender, PropertyChangedEventArgs e)
    {
    	this.PersistanceState = PState.Modified;
    	AnyPropertyChanged(sender, e);
    }
    
    public void HandleAnyPropertyChanged(object sender, EventArgs e)
    {
    	this.Dirty = true;
    }
    
    public override void ActivatePropertyChangedEvent(bool resetPersistenceState)
    {
    	ActivatePropertyChangedEvent(resetPersistenceState, HandleAnyPropertyChanged);
    }
    
    public void ActivatePropertyChangedEvent(bool resetPersistenceState, EventHandler anyPropertyChangedHandler)
    {
    	if (this.LocalPropertyChanged == null && this.AnyPropertyChanged == null)
    	{
    		if(resetPersistenceState) 
    		{
    			this.PersistanceState = PState.Unchanged;
    			this.Dirty = false;
    		}
    
    		this.LocalPropertyChanged += HandleLocalPropertyChanged;
            this.AnyPropertyChanged += anyPropertyChangedHandler;
    
    		if(City != null)
    		{
    			City.ActivatePropertyChangedEvent(resetPersistenceState, anyPropertyChangedHandler);
    		}
    
    
    		if(SalutationStatus != null)
    		{
    			SalutationStatus.ActivatePropertyChangedEvent(resetPersistenceState, anyPropertyChangedHandler);
    		}
    
    
    		if(Mandator != null)
    		{
    			Mandator.ActivatePropertyChangedEvent(resetPersistenceState, anyPropertyChangedHandler);
    		}
    
    	}
    }
    
    public override void DeactivatePropertyChangedEvent()
    {
    	if(this.LocalPropertyChanged != null && this.AnyPropertyChanged != null) 
    	{
    		this.LocalPropertyChanged = null;
    		this.AnyPropertyChanged = null;
    		if(City != null)
    		{
    			City.DeactivatePropertyChangedEvent();
    		}
    		if(SalutationStatus != null)
    		{
    			SalutationStatus.DeactivatePropertyChangedEvent();
    		}
    		if(Mandator != null)
    		{
    			Mandator.DeactivatePropertyChangedEvent();
    		}
    	}
    }
    
    public override bool Equals(object obj)
    {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (GetType() != obj.GetType())
            return false;
    	//objects are equal when they are not new (Id != 0) and the Ids are equal
        WoozleObject other = (WoozleObject)obj;
        if (Id == 0 || Id != other.Id)
            return false;
        return true;
    }
    
    public override int GetHashCode()
    {
        int prime = 31;
    	int result = 1;
    	result = prime * result + Id;
    	return result;
    }
    }
    
}
