<#
//*********************************************************
//
//    Copyright (c) Microsoft. All rights reserved.
//    This code is licensed under the Microsoft Public License.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
#>
<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#@
 output extension=".cs"#><#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile =  @"..\WoozleModel.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);
WriteHeader(fileManager);
BeginNamespace(namespaceName, code);
EndNamespace(namespaceName);



foreach (var entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
    fileManager.StartNewFile(entity.Name + "Repository.cs");
    BeginNamespace(namespaceName, code);
#>
<#=Accessibility.ForType(entity)#> <#=code.SpaceAfter(code.AbstractOption(entity))#>partial class <#=code.Escape(entity)#>Repository <#=GetRepositoryInterface(entity,code)#>
{

	public <#=code.Escape(entity)#>Repository(IEfUnitOfWork Context) : base(Context)
	{
	}

<#
    var propertiesWithDefaultValues = entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity && p.DefaultValue != null);
    var collectionNavigationProperties = entity.NavigationProperties.Where(np => np.DeclaringType == entity && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);
    var navigationProperties = entity.NavigationProperties.Where(np => np.DeclaringType == entity && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.One);
	var complexProperties = entity.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == entity);
#>

	<#=WriteSynchronizeMethod(entity, code) #>

}

<#
    EndNamespace(namespaceName);
}

foreach (var complex in ItemCollection.GetItems<ComplexType>().OrderBy(e => e.Name))
{
    fileManager.StartNewFile(complex.Name + ".cs");
    BeginNamespace(namespaceName, code);
#>
<#=Accessibility.ForType(complex)#> partial class <#=code.Escape(complex)#>
{
<#
    var complexProperties = complex.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == complex);
    var propertiesWithDefaultValues = complex.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == complex && p.DefaultValue != null);

    if (propertiesWithDefaultValues.Any() || complexProperties.Any())
    {
#>
    public <#=code.Escape(complex)#>()
    {
<#
        foreach (var edmProperty in propertiesWithDefaultValues)
        {
#>
        this.<#=code.Escape(edmProperty)#> = <#=code.CreateLiteral(edmProperty.DefaultValue)#>;
<#
        }

        foreach (var complexProperty in complexProperties)
        {
#>
        this.<#=code.Escape(complexProperty)#> = new <#=code.Escape(complexProperty.TypeUsage)#>();
<#
        }
#>
    }

<#
    }

    var primitiveProperties = complex.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == complex);
    if (primitiveProperties.Any())
    {
        foreach(var edmProperty in primitiveProperties)
        {
            WriteProperty(code, edmProperty);
        }
    }

    if (complexProperties.Any())
    {
#>

<#
        foreach(var edmProperty in complexProperties)
        {
            WriteProperty(code, edmProperty);
        }
    }
#>
}

<#
    EndNamespace(namespaceName);
}

if (!VerifyTypesAreCaseInsensitiveUnique(ItemCollection))
{
    return "";
}

fileManager.Process();

#>
<#+
void WriteHeader(EntityFrameworkTemplateFileManager fileManager)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Diagnostics;
using System;
using System.Linq;
using System.Collections.Generic;
using Woozle.Model;
using Woozle.Model.SessionHandling;

<#+
    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}


void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

void WriteProperty(CodeGenerationTools code, EdmProperty edmProperty)
{
	if(code.Escape(edmProperty) != "Id" && code.Escape(edmProperty) != "MandatorId") 
	{
		    WriteProperty(Accessibility.ForProperty(edmProperty),
                  code.Escape(edmProperty.TypeUsage),
                  code.Escape(edmProperty),
                  code.SpaceAfter(Accessibility.ForGetter(edmProperty)),
                  code.SpaceAfter(Accessibility.ForSetter(edmProperty)));
	}
}

void WriteNavigationProperty(CodeGenerationTools code, NavigationProperty navigationProperty)
{
    var endType = code.Escape(navigationProperty.ToEndMember.GetEntityType());
    WriteProperty(PropertyVirtualModifier(Accessibility.ForProperty(navigationProperty)),
                  navigationProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many ? ("ObservableCollection<" + endType + ">") : endType,
                  code.Escape(navigationProperty),
                  code.SpaceAfter(Accessibility.ForGetter(navigationProperty)),
                  code.SpaceAfter(Accessibility.ForSetter(navigationProperty)));
}

void WriteProperty(string accessibility, string type, string name, string getterAccessibility, string setterAccessibility)
{
#>
    <#=accessibility#> <#=type#> <#=name#> { <#=getterAccessibility#>get; <#=setterAccessibility#>set; }
<#+
}

string PropertyVirtualModifier(string accessibility)
{
    return accessibility + (accessibility != "private" ? " virtual" : "");
}

bool VerifyTypesAreCaseInsensitiveUnique(EdmItemCollection itemCollection)
{
    var alreadySeen = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
    foreach(var type in itemCollection.GetItems<StructuralType>())
    {
        if (!(type is EntityType || type is ComplexType))
        {
            continue;
        }

        if (alreadySeen.ContainsKey(type.FullName))
        {
            Error(String.Format(CultureInfo.CurrentCulture, "This template does not support types that differ only by case, the types {0} are not supported", type.FullName));
            return false;
        }
        else
        {
            alreadySeen.Add(type.FullName, true);
        }
    }

    return true;
}

void WriteCustomObservableCollection()
{
#>
// An System.Collections.ObjectModel.ObservableCollection that raises
// individual item removal notifications on clear and prevents adding duplicates.
public class ObservableCollection<T> : ObservableCollection<T>
{
    protected override void ClearItems()
    {
        new List<T>(this).ForEach(t => Remove(t));
    }

    protected override void InsertItem(int index, T item)
    {
        if (!this.Contains(item))
        {
            base.InsertItem(index, item);
        }
    }
}
<#+
}


string BaseTypeName(EntityType entity, CodeGenerationTools code)
{
  return entity.BaseType == null ? "EFPrototype.Models.WoozleObject" :
     MultiSchemaEscape((StructuralType)entity.BaseType, code);
}
string MultiSchemaEscape(StructuralType type, CodeGenerationTools code)
{
  return code.Escape(type);
}
string CheckForMandator(EntityType entity, CodeGenerationTools code)
{
    var primitiveProperties = entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity);
    if (primitiveProperties.Any())
    {
        foreach (var edmProperty in primitiveProperties)
        {
			if(code.Escape(edmProperty) == "MandatorId") 
			{
				return ", IMandatorCapable";
			}
        }
    }
	return "";
}

string GetRepositoryInterface(EntityType entity, CodeGenerationTools code)
{
	return " : AbstractRepository<" + entity.Name + ">";
}

string GetRepository(EntityType entity, CodeGenerationTools code)
{
    return "private readonly IRepository<" + entity.Name + "> repository;";
}

string GetNavigationPropertyString(EntityType entity, CodeGenerationTools code)
{
	string navProperties = "";
	var collectionNavigationProperties = entity.NavigationProperties.Where(np => np.DeclaringType == entity && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);

	foreach(var t in collectionNavigationProperties)
	{
			navProperties += "foreach(var n in " + t +
				"{ " + Environment.NewLine + 
				"	//Foo " + Environment.NewLine +
				"} ";
	}

	 return navProperties;
}

string WriteSynchronizeMethod(EntityType entity, CodeGenerationTools code)
{
	string navProperties = "";
	string singleNavProperties = "";
	var collectionNavigationProperties = entity.NavigationProperties.Where(np => np.DeclaringType == entity && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);
	var navigationProperties = entity.NavigationProperties.Where(np => np.DeclaringType == entity && np.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many);

	var test = entity.NavigationProperties;

	foreach(var b in navigationProperties)
	{
	  singleNavProperties += Environment.NewLine + "			attachedObj." + b.Name + " = Context.SynchronizeObject(entity." + b.Name + ", session); " + Environment.NewLine;
	}
	
	foreach(var t in collectionNavigationProperties)
	{
			var type = t.TypeUsage;

			var properties = type.MetadataProperties;
			
			string subTypes = "";

			foreach(var x in t.ToEndMember.GetEntityType().NavigationProperties.Where(np => np.DeclaringType == t.ToEndMember.GetEntityType() && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.One))
			{
				subTypes += Environment.NewLine + "					Context.SynchronizeObject(n." + x.Name + ", session);";
			}

			navProperties += Environment.NewLine +
				"			//Navigation Property '" + t + "'" + Environment.NewLine + 
				"			stopwatch.Start();" + Environment.NewLine +
				"			foreach(var n in entity." + t + ".Where(n => n.PersistanceState == PState.Added))" + Environment.NewLine + 
				"			{ " + Environment.NewLine + 
				"				if (!attachedObj." + t + ".Contains(n)) attachedObj." + t + ".Add(n);" + Environment.NewLine +
				"				if (n is IMandatorCapable)" + Environment.NewLine +
				"				{" + Environment.NewLine +
				"					n.MandatorId = session.SessionObject.Mandator.Id;" + Environment.NewLine +
				"				}" + Environment.NewLine +
				"			} "  + Environment.NewLine +
				"			foreach(var n in entity." + t + ".Where(n => n.PersistanceState == PState.Modified || n.PersistanceState == PState.Deleted))" + Environment.NewLine + 
				"			{ " + Environment.NewLine + 
				"					Context.SynchronizeObject(n, session); " + Environment.NewLine +
				"			} "+ Environment.NewLine +
				"			stopwatch.Stop();"+ Environment.NewLine +
				"			this.Logger.Info(string.Format(\"Synchronize state of '{0}', took {1} ms\", \"" + t + "\", stopwatch.ElapsedMilliseconds));";

	}

	return" public override " + entity.Name + " Synchronize(" + entity.Name + " entity, Session session) " + Environment.NewLine +
		  "	 { " + Environment.NewLine +
		  "		try" + Environment.NewLine + 
          "		{" + Environment.NewLine + 
		  "			var stopwatch = new Stopwatch();" + Environment.NewLine +
		  "			var attachedObj = Context.SynchronizeObject(entity, session);" + Environment.NewLine + 
		  "			" + singleNavProperties + Environment.NewLine + 
		  "			" + navProperties + Environment.NewLine +
		  "			return attachedObj; " + Environment.NewLine +
          "		}" + Environment.NewLine + 
          "		catch (Exception e)" + Environment.NewLine + 
          "		{" + Environment.NewLine + 
	      "			this.Logger.Error(e.Message); " + Environment.NewLine +
		  "			throw new PersistenceException(PersistenceOperation.SYNCHRONIZE, e); " + Environment.NewLine +
          "		} " + Environment.NewLine +
		  "     } ";
}
#>